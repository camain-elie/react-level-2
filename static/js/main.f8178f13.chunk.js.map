{"version":3,"sources":["components/searchInput/searchInput.js","components/githubElement/githubElement.js","components/resultList/resultList.js","components/pages/pages.js","services/github.js","App.js","reportWebVitals.js","index.js"],"names":["SearchInput","getInputValue","searchIcon","useState","value","setValue","useEffect","delay","setTimeout","clearTimeout","className","type","onChange","e","target","placeholder","GithubElement","dataItem","login","avatar_url","html_url","score","src","alt","href","rel","ResultList","itemList","dataArray","Component","userMessage","map","item","id","generateList","Pages","totalPages","currentPage","changeOnePage","changeToPage","pages","buttonTab","pageMax","i","push","pagesArray","index","onClick","leftArrow","rightArrow","length","unshift","generatePagesButtons","GITHUB_URL","API_LIMIT_MESSAGE","page","a","requestURL","fetch","response","statusText","Promise","reject","message","json","data","App","searchValue","setSearchValue","setDataArray","numberOfItems","setNumberOfItems","setUserMessage","setCurrentPages","sendUserSearch","searchUser","then","res","items","total_count","catch","error","console","n","Math","ceil","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8178f13.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './searchInput.css';\r\n\r\nexport default function SearchInput ({ getInputValue, searchIcon }) {\r\n    \r\n    const [value, setValue] = useState('');\r\n\r\n    /* The value is updated only one second\r\n        after the user stops to type to prevent\r\n        updates to the parent component and therefore\r\n        too many API calls */\r\n    useEffect(() => {\r\n        const delay = setTimeout(() => {\r\n            getInputValue(value);\r\n        }, 1000);\r\n    \r\n        return () => clearTimeout(delay);\r\n    }, [value]);\r\n\r\n\r\n    return(\r\n        <div className=\"search-input\">\r\n\r\n            <p className={`search-input__icon ${value ? 'search-input__icon--text' : ''} material-icons-outlined`}>{searchIcon}</p>\r\n            \r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                placeholder=\"Search a user\"    \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nSearchInput.propTypes = {\r\n    getInputValue: PropTypes.func,\r\n    searchIcon: PropTypes.string,\r\n};","import PropTypes from 'prop-types';\r\n\r\nimport './githubElement.css';\r\n\r\n/** \r\n * GithubElement component build a card type component \r\n * displaying a github user's information. \r\n*/\r\nexport default function GithubElement ({ dataItem }) {\r\n\r\n    const {login, avatar_url, html_url, score} = dataItem;\r\n\r\n    return(\r\n        <div className=\"github-element\">\r\n            <img\r\n                src={avatar_url}\r\n                alt=\"user avatar\"\r\n            />\r\n\r\n            <div className=\"github-element__info\">\r\n                <p>\r\n                    <a\r\n                        href={html_url}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        {login}\r\n                    </a>\r\n                </p>\r\n                <p>\r\n                    <a\r\n                        href={`${html_url}?tab=repositories`}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        See user&apos;s repositeries\r\n                    </a>\r\n                </p>\r\n                <p>\r\n                    {`${score}${score % 1 === 0 ? \".0\" : \"\"}`}\r\n                    <span className=\"github-element__score-icon material-icons-round\">\r\n                        star\r\n                    </span>\r\n\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nGithubElement.propTypes = {\r\n    dataItem: PropTypes.object.isRequired,\r\n};","import PropTypes from 'prop-types';\r\n\r\nimport './resultList.css';\r\n\r\n// Generate an array of given Components from an array of data \r\nconst generateList = (dataArray, Component) => {\r\n\r\n    return dataArray.map(item => {\r\n        return(\r\n            <Component\r\n                key={item.id}\r\n                dataItem={item}\r\n            />);\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Create a list of a given Component from an array of data or\r\n * display a message instead if necessary.\r\n */\r\nexport default function ResultList ({ dataArray, Component, userMessage }) {\r\n\r\n    let itemList;\r\n\r\n    if(userMessage){\r\n        itemList = <div>{userMessage}</div>;\r\n    }else{\r\n        itemList = generateList(dataArray, Component);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {itemList}\r\n        </div>\r\n    );\r\n}\r\n\r\nResultList.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.any),\r\n    Component: PropTypes.elementType.isRequired,\r\n    userMessage: PropTypes.string,\r\n};","import PropTypes from 'prop-types';\r\n\r\nimport './pages.css';\r\n\r\n/**\r\n * Pages component generates a list of button to let the user change and display\r\n * the pages of a multi pages list of results.\r\n * The logic of the component is mostly handled by the parent component and passed\r\n * through the props.\r\n */\r\nexport default function Pages ({ totalPages, currentPage, changeOnePage, changeToPage }) {\r\n\r\n    const generatePagesButtons = () => {\r\n\r\n        let buttonTab = [];\r\n        const pageMin = 1, pageMax = totalPages;\r\n        \r\n        // fill buttonTab with strings that will be contained in the buttons\r\n        for(let i = 1; i<=pageMax; i++){\r\n            if((i===pageMin) || (i===pageMax) || (i >= currentPage-1 && i<= currentPage+1)){\r\n                buttonTab.push(i);\r\n            }else{\r\n                if((i===currentPage-2) || (i===currentPage+2)){\r\n                    buttonTab.push(\"...\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // generate array with the buttons from buttonButton\r\n        let pagesArray = buttonTab.map((item, index) => {\r\n            if(item === \"...\"){\r\n                return(\r\n                    <div className=\"pages__more\" key={index+1} >\r\n                        <p>{item}</p>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return(\r\n                <div className={`pages__number ${item === currentPage ? \"pages__number--current\" : \"\"}`}\r\n                    key={index+1}\r\n                    onClick={() => changeToPage(item)}\r\n                >\r\n                    <p>{item}</p>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        // finally we add the left and right arrow buttons to pagesArray\r\n        const leftArrow = (\r\n            <div className={`pages__arrow${currentPage === pageMin ? \"--disabled\" : \"\"}`}\r\n                onClick={() => changeOnePage(-1)} \r\n                key={0}    \r\n            >\r\n                <p className=\"material-icons\">\r\n                    chevron_left\r\n                </p>\r\n            </div>\r\n        );\r\n        const rightArrow = (\r\n            <div className={`pages__arrow${currentPage === pageMax ? \"--disabled\" : \"\"}`}\r\n                onClick={() => changeOnePage(1)}\r\n                key={pagesArray.length+1} >\r\n                <p className=\"material-icons\">\r\n                    chevron_right\r\n                </p>\r\n            </div>\r\n        );\r\n\r\n        pagesArray.unshift(leftArrow);\r\n        pagesArray.push(rightArrow);\r\n\r\n        return pagesArray;\r\n    };\r\n\r\n    //if less than two pages, no need for pages\r\n    if(totalPages < 2) return null; \r\n\r\n    const pages = generatePagesButtons();\r\n\r\n    return(\r\n        <div className=\"pages\" >\r\n            {pages}\r\n        </div>\r\n    );\r\n}\r\n\r\nPages.propTypes = {\r\n    totalPages: function(props, propName, componentName){\r\n        if(props[propName] < 0){\r\n            return new Error(\r\n                \"Invalid prop '\" + propName + \"' supplied to '\" + componentName + \"'. '\" +\r\n                propName + \"' must be a positive Integer number.\"\r\n            );\r\n        }\r\n        if(typeof props[propName] != 'number'){\r\n            return new Error(\r\n                \"Invalid prop '\" + propName + \"' supplied to '\" + componentName + \"'. '\" +\r\n                propName + \"' must be of type 'Number'.\"\r\n            );\r\n        }\r\n    },\r\n    currentPage: function(props, propName, componentName){\r\n        if(typeof props[propName] != 'number'){\r\n            return new Error(\r\n                \"Invalid prop '\" + propName + \"' supplied to '\" + componentName + \"'. '\" +\r\n                propName + \"' must be of type 'Number'.\"\r\n            );\r\n        }\r\n        if(props[propName] < 0 || props[propName] > props['totalPages']){\r\n\r\n            return new Error(\r\n                \"Invalid prop '\" + propName + \"' supplied to '\" + componentName + \"'. '\" +\r\n                propName + \"' must be between 0 and the value of 'totalPages' prop.\"\r\n            );\r\n        }\r\n    },\r\n    changeOnePage: PropTypes.func.isRequired,\r\n    changeToPage: PropTypes.func.isRequired,\r\n};","const GITHUB_URL = 'https://api.github.com/';\r\n\r\nconst API_LIMIT_MESSAGE = 'It looks like you have reached the API rate limit, you might want to try again in a minute !';\r\n\r\nexport async function searchUser ( login, page ) {\r\n    const requestURL = `${GITHUB_URL}search/users?q=${login}${page > 1 ? `&page=${page}` : ''}`;\r\n\r\n    const response = await fetch(requestURL);\r\n    /* Handling API rate limit because it is considered as \r\n        a successfull response */\r\n    if(response.statusText === \"Forbidden\"){\r\n        return Promise.reject({ message: API_LIMIT_MESSAGE});\r\n    }\r\n    const data = await response.json();\r\n\r\n    return data;\r\n\r\n}","import { useEffect, useState } from 'react';\r\n\r\nimport SearchInput from './components/searchInput/searchInput';\r\nimport GithubElement from './components/githubElement/githubElement';\r\nimport ResultList from './components/resultList/resultList';\r\nimport Pages from './components/pages/pages';\r\nimport { searchUser } from './services/github';\r\n\r\nimport './App.css';\r\n\r\nconst NO_RESULT = 'Sorry, we were unable to find any user with this username, try again ;)';\r\n/* can't go above page 34 because github\r\n    provides only the first 1000 search results \r\n    with 30 result per page */\r\nconst PAGE_MAX = 34;\r\n\r\n/**\r\n * The following - Github user search - application.\r\n * When the user \r\n * \r\n */\r\nfunction App() {\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [numberOfItems, setNumberOfItems] = useState(0);\r\n    const [userMessage, setUserMessage] = useState('');\r\n    const [currentPage, setCurrentPages] = useState(1);\r\n\r\n    const sendUserSearch = (value, page) => {\r\n        if(value){\r\n            searchUser(value, page)\r\n                .then(res => {\r\n\r\n                    /* set currentPage to 1 if it's an API call\r\n                        because of a change of searchValue */\r\n                    if(!page){\r\n                        setCurrentPages(1);\r\n                    }\r\n                    \r\n                    setDataArray(res.items);\r\n                    setNumberOfItems(res.total_count);\r\n\r\n                    if(!res.total_count){\r\n                        setUserMessage(NO_RESULT);\r\n                    }else{\r\n                        setUserMessage('');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error(error.message);\r\n                    setUserMessage(error.message);\r\n                });\r\n        }else{\r\n            setDataArray([]);\r\n            setUserMessage(\"Enter the user's name you are looking for in the field above.\");\r\n            setNumberOfItems(0);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        sendUserSearch(searchValue);\r\n    }, [searchValue]);\r\n\r\n    useEffect(() => {\r\n        sendUserSearch(searchValue, currentPage);\r\n    }, [currentPage]);\r\n\r\n    const changeOnePage = (page) => {\r\n        setCurrentPages(currentPage + page);\r\n    };\r\n\r\n    const changeToPage = (page) => {\r\n        setCurrentPages(page);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <SearchInput \r\n                getInputValue={setSearchValue}\r\n                searchIcon=\"search\"\r\n                n={numberOfItems}\r\n            />\r\n\r\n            <ResultList \r\n                dataArray={dataArray}\r\n                Component={GithubElement}\r\n                userMessage={userMessage}\r\n            />\r\n\r\n            <Pages \r\n                totalPages={Math.ceil(numberOfItems/30) > PAGE_MAX ? PAGE_MAX : Math.ceil(numberOfItems/30) || 1}\r\n                currentPage={currentPage}\r\n                changeOnePage={changeOnePage}\r\n                changeToPage={changeToPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}